// Cloud Firestore Security Rules for AmaPlayer
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read all user documents for search, but only write their own (guests cannot write)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && !isGuestUser() 
        && request.auth.uid == userId;
    }
    
    // Posts collection rules
    match /posts/{postId} {
      // Anyone can read posts (including guests)
      allow read: if true;
      
      // Only authenticated non-guest users can create posts
      allow create: if request.auth != null 
        && !isGuestUser()
        && request.auth.uid == resource.data.userId
        && validatePostData();
      
      // Allow updates for likes (all users) and comments (non-guests only)
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        onlyLikesChanged() ||
        (!isGuestUser() && onlyCommentsChanged())
      );
      
      // Users can delete their own posts (guests cannot)
      allow delete: if request.auth != null 
        && !isGuestUser()
        && request.auth.uid == resource.data.userId;
    }
    
    // Comments collection (separate from posts)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && !isGuestUser() && validateCommentData();
      allow update, delete: if request.auth != null 
        && !isGuestUser()
        && request.auth.uid == resource.data.userId;
    }
    
    // Helper functions
    function isGuestUser() {
      return request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function validatePostData() {
      return request.resource.data.keys().hasAll(['caption', 'userId', 'userDisplayName', 'timestamp'])
        && request.resource.data.caption is string
        && request.resource.data.caption.size() <= 1000
        && request.resource.data.userId is string
        && request.resource.data.userDisplayName is string;
    }
    
    function validateCommentData() {
      return request.resource.data.keys().hasAll(['text', 'userId', 'userDisplayName', 'timestamp'])
        && request.resource.data.text is string
        && request.resource.data.text.size() <= 500
        && request.resource.data.userId is string
        && request.resource.data.userDisplayName is string;
    }
    
    function onlyCommentsChanged() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments']);
    }
    
    function onlyLikesChanged() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if request.auth != null && !isGuestUser() && validateFriendRequestData();
      allow update: if request.auth != null && !isGuestUser() && (
        request.auth.uid == resource.data.receiverId ||
        request.auth.uid == resource.data.senderId
      );
      allow delete: if request.auth != null && !isGuestUser() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.user1 ||
        request.auth.uid == resource.data.user2
      );
      allow create: if request.auth != null && !isGuestUser() && (
        request.auth.uid == request.resource.data.user1 ||
        request.auth.uid == request.resource.data.user2
      );
      allow delete: if request.auth != null && !isGuestUser() && (
        request.auth.uid == resource.data.user1 ||
        request.auth.uid == resource.data.user2
      );
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if request.auth != null && !isGuestUser() && validateMessageData();
      allow update: if request.auth != null && !isGuestUser() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
      allow delete: if request.auth != null && !isGuestUser() && request.auth.uid == resource.data.senderId;
    }
    
    function validateFriendRequestData() {
      return request.resource.data.keys().hasAll(['senderId', 'receiverId', 'senderName', 'status', 'timestamp'])
        && request.resource.data.senderId is string
        && request.resource.data.receiverId is string
        && request.resource.data.senderName is string
        && request.resource.data.status in ['pending', 'accepted', 'rejected']
        && request.resource.data.senderId == request.auth.uid;
    }
    
    function validateMessageData() {
      return request.resource.data.keys().hasAll(['senderId', 'receiverId', 'message', 'timestamp'])
        && request.resource.data.senderId is string
        && request.resource.data.receiverId is string
        && request.resource.data.message is string
        && request.resource.data.message.size() <= 1000
        && request.resource.data.senderId == request.auth.uid;
    }
  }
}